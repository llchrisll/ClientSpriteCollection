-- Decompiled using luadec 2.2 rev: 895d923 for Lua 5.1 from https://github.com/viruscamp/luadec
-- Command line: .\data\luafiles514\lua files\Enchant\EnchantList_f.lub 

-- params : ...
-- function num : 0
Table = {}
LoadFailed = false
GlobalTargetItemTbl = {}
-- DECOMPILER ERROR at PC8: Confused about usage of register: R0 in 'UnsetPending'

table.find = function(in_table, in_value)
  -- function num : 0_0
  if type(in_table) ~= "table" then
    return nil
  end
  for k,v in pairs(in_table) do
    if v == in_value then
      return k
    end
  end
  return nil
end

CreateEnchantInfo = function()
  -- function num : 0_1
  local EnchantInfo = {}
  EnchantInfo.Slot = {}
  EnchantInfo.SetFailed = function(self, in_funcName, in_errMsg)
    -- function num : 0_1_0
    local EnchantNum = (table.find)(Table, self)
    MessageBox("Table[ " .. EnchantNum .. " ]:" .. in_funcName .. " : " .. in_errMsg)
    LoadFailed = true
  end

  EnchantInfo.SetSlotOrder = function(self, ...)
    -- function num : 0_1_1
    if #arg < 1 or MAX_SLOT_NUM < #arg then
      self:SetFailed("SetSlotOrder", "인자의 개수는 1개에서 " .. MAX_SLOT_NUM .. "개 사이어야 합니다.")
    end
    self.SlotOrder = {}
    for i,v in ipairs(arg) do
      if type(v) ~= "number" then
        self:SetFailed("SetSlotOrder", i .. "번째 값은 숫자여야 합니다.")
      else
        if v < 0 or MAX_SLOT_NUM - 1 < v then
          self:SetFailed("SetSlotOrder", i .. "번째 값은 0에서 " .. MAX_SLOT_NUM - 1 .. "사이어야 합니다.")
        end
      end
      ;
      (table.insert)(self.SlotOrder, v)
    end
    for k,slotNum in pairs(self.SlotOrder) do
      -- DECOMPILER ERROR at PC61: Confused about usage of register: R7 in 'UnsetPending'

      (self.Slot)[slotNum] = CreateSlotInfo()
    end
  end

  EnchantInfo.AddTargetItem = function(self, in_targetItem)
    -- function num : 0_1_2 , upvalues : EnchantInfo
    if self.SlotOrder == nil then
      self:SetFailed("AddTargetItem", "SetSlotOrder 함수가 먼저 호출되어야 합니다.")
    end
    if type(in_targetItem) ~= "string" then
      self:SetFailed("AddTargetItem", "값은 문자열이어야 합니다.")
    end
    if (table.find)(GlobalTargetItemTbl, in_targetItem) ~= nil then
      self:SetFailed("AddTargetItem", "[ " .. in_targetItem .. " ]은 중복된 대상 아이템입니다.")
    else
      ;
      (table.insert)(GlobalTargetItemTbl, in_targetItem)
    end
    local slotCount = C_GetSlotCount(in_targetItem)
    if slotCount > 0 then
      for k,slotNum in pairs(EnchantInfo.SlotOrder) do
        if slotNum < slotCount then
          EnchantInfo:SetFailed("AddTargetItem", "[ " .. in_targetItem .. " ] 활성화 된 슬롯에는 인챈트를 할 수 없습니다. 해당 아이템의 슬롯 개수를 확인해주세요.")
        end
      end
    end
    do
      if not self.TargetItemTbl then
        self.TargetItemTbl = {}
        ;
        (table.insert)(self.TargetItemTbl, in_targetItem)
      end
    end
  end

  EnchantInfo.SetCondition = function(self, in_minRefine, in_minGrade)
    -- function num : 0_1_3
    if type(in_minRefine) ~= "number" then
      self:SetFailed("SetCondition", "1번째 값[최소 제련도]은 숫자여야 합니다.")
    else
      if type(in_minGrade) ~= "number" then
        self:SetFailed("SetCondition", "2번째 값[최소 등급]은 숫자여야 합니다.")
      end
    end
    if in_minRefine < 0 or MAX_REFINE_LEVEL < in_minRefine then
      self:SetFailed("SetCondition", "1번째 값[최소 제련도]은 0과 " .. MAX_REFINE_LEVEL .. "사이어야 합니다.")
    else
      if in_minGrade < 0 or MAX_GRADE_LEVEL < in_minGrade then
        self:SetFailed("SetCondition", "2번째 값[최소 등급]은 0과 " .. MAX_GRADE_LEVEL .. "사이어야 합니다.")
      end
    end
    local tbl = {MinRefine = in_minRefine, MinGrade = in_minGrade}
    self.Condition = tbl
  end

  EnchantInfo.ApproveRandomOption = function(self, in_check)
    -- function num : 0_1_4
    if type(in_check) ~= "boolean" then
      self:SetFailed("ApproveRandomOption", "인자는 true 혹은 false여야 합니다.")
    end
    self.bApproveRandomOpt = in_check
  end

  EnchantInfo.SetReset = function(self, in_bReset, in_Rate, in_Zeny, ...)
    -- function num : 0_1_5
    if type(in_bReset) ~= "boolean" then
      self:SetFailed("SetReset", "1번째 값은 true 혹은 false여야 합니다.")
    else
      if type(in_Rate) ~= "number" then
        self:SetFailed("SetReset", "2번째 값은 숫자여야 합니다.")
      else
        if type(in_Zeny) ~= "number" then
          self:SetFailed("SetReset", "3번째 값은 숫자여야 합니다.")
        end
      end
    end
    if in_Rate < 0 or in_Rate > 100000 then
      self:SetFailed("SetReset", "2번째 값은 0에서 100000사이어야 합니다.")
    end
    if type(in_Zeny) ~= "number" then
      self:SetFailed("SetReset", "3번째 값은 숫자여야 합니다.")
    else
      if in_Zeny < 0 then
        self:SetFailed("SetReset", "3번째 값은 0보다 커야 합니다.")
      end
    end
    if MAX_MATERIAL_NUM < #arg then
      self:SetFailed("SetReset", "재료는 " .. MAX_MATERIAL_NUM .. "종 이하여야 합니다.")
    end
    local tempMatTbl = {}
    for i,matInfo in ipairs(arg) do
      if type(matInfo) ~= "table" then
        self:SetFailed("SetReset", "재료는 테이블 형식으로 작성되어야 합니다.")
      else
        if type(matInfo[1]) ~= "string" then
          self:SetFailed("SetReset", "재료 목록이 잘못 작성되었습니다.")
        else
          if type(matInfo[2]) ~= "number" then
            self:SetFailed("SetReset", "재료 목록이 잘못 작성되었습니다.")
          end
        end
      end
      tempMatTbl[matInfo[1]] = matInfo[2]
    end
    local tbl = {bReset = in_bReset, Rate = in_Rate, Zeny = in_Zeny, MatTbl = tempMatTbl}
    self.Reset = tbl
  end

  EnchantInfo.SetCaution = function(self, in_msg)
    -- function num : 0_1_6
    if type(in_msg) ~= "string" then
      self:SetFailed("SetCaution", "값은 문자열이어야 합니다.")
    end
    self.CautionMsg = in_msg
  end

  return EnchantInfo
end

CreateSlotInfo = function()
  -- function num : 0_2
  local SlotInfo = {}
  SlotInfo.PerfectECTbl = {}
  SlotInfo.UpgradeECTbl = {}
  SlotInfo.GetEnchantNum = function(self)
    -- function num : 0_2_0
    for EnchantNum,EnchantInfo in pairs(Table) do
      local SlotNum = (table.find)(EnchantInfo.Slot, self)
      if SlotNum ~= nil then
        return EnchantNum, SlotNum
      end
    end
    return nil
  end

  SlotInfo.SetFailed = function(self, in_funcName, in_errMsg)
    -- function num : 0_2_1
    local EnchantNum, SlotNum = self:GetEnchantNum()
    MessageBox("Table[ " .. EnchantNum .. " ].Slot[ " .. SlotNum .. " ]:" .. in_funcName .. " : " .. in_errMsg)
    LoadFailed = true
  end

  SlotInfo.SetRequire = function(self, in_Zeny, ...)
    -- function num : 0_2_2
    if type(in_Zeny) ~= "number" then
      self:SetFailed("SetRequire", "1번째 값은 숫자여야 합니다.")
    else
      if in_Zeny < 0 then
        self:SetFailed("SetRequire", "1번째 값은 0보다 커야 합니다.")
      end
    end
    if MAX_MATERIAL_NUM < #arg then
      self:SetFailed("SetRequire", "재료는 " .. MAX_MATERIAL_NUM .. "종 이하여야 합니다.")
    end
    local tempMatTbl = {}
    for i,matInfo in ipairs(arg) do
      if type(matInfo) ~= "table" then
        self:SetFailed("SetRequire", "재료는 테이블 형식으로 작성되어야 합니다.")
      else
        if type(matInfo[1]) ~= "string" then
          self:SetFailed("SetRequire", "재료 목록이 잘못 작성되었습니다.")
        else
          if type(matInfo[2]) ~= "number" then
            self:SetFailed("SetRequire", "재료 목록이 잘못 작성되었습니다.")
          end
        end
      end
      tempMatTbl[matInfo[1]] = matInfo[2]
    end
    do
      if not self.RequireTbl then
        self.RequireTbl = {}
        -- DECOMPILER ERROR at PC72: Confused about usage of register: R4 in 'UnsetPending'

        ;
        (self.RequireTbl).Zeny = in_Zeny
        -- DECOMPILER ERROR at PC74: Confused about usage of register: R4 in 'UnsetPending'

        ;
        (self.RequireTbl).MatTbl = tempMatTbl
      end
    end
  end

  SlotInfo.SetSuccessRate = function(self, in_successRate)
    -- function num : 0_2_3
    if type(in_successRate) ~= "number" then
      self:SetFailed("SetSuccessRate", "값은 숫자여야 합니다.")
    else
      if in_successRate < 0 or in_successRate > 100000 then
        self:SetFailed("SetSuccessRate", "값은 0에서 100000사이어야 합니다.")
      end
    end
    self.SuccessRate = in_successRate
  end

  SlotInfo.SetGradeBonus = function(self, in_Grade, in_bonusRate)
    -- function num : 0_2_4
    if type(in_Grade) ~= "number" then
      self:SetFailed("SetGradeBonus", "1번째 값은 숫자여야 합니다.")
    else
      if type(in_bonusRate) ~= "number" then
        self:SetFailed("SetGradeBonus", "2번째 값은 숫자여야 합니다.")
      end
    end
    if in_Grade < 0 or MAX_GRADE_LEVEL < in_Grade then
      self:SetFailed("SetGradeBonus", "1번째 값은 0과 " .. MAX_GRADE_LEVEL .. "사이어야 합니다.")
    else
      if in_bonusRate < 0 or in_bonusRate > 100000 then
        self:SetFailed("SetGradeBonus", "2번째 값은 0에서 100000사이어야 합니다.")
      end
    end
    if not self.GradeBonusTbl then
      self.GradeBonusTbl = {}
      -- DECOMPILER ERROR at PC46: Confused about usage of register: R3 in 'UnsetPending'

      ;
      (self.GradeBonusTbl)[in_Grade] = in_bonusRate
    end
  end

  SlotInfo.SetEnchant = function(self, in_Grade, in_ItemDB, in_Rate)
    -- function num : 0_2_5
    if type(in_Grade) ~= "number" then
      self:SetFailed("SetEnchant", "1번째 값은 숫자여야 합니다.")
    else
      if type(in_ItemDB) ~= "string" then
        self:SetFailed("SetEnchant", "2번째 값은 문자열이어야 합니다.")
      else
        if type(in_Rate) ~= "number" then
          self:SetFailed("SetEnchant", "3번째 값은 숫자여야 합니다.")
        end
      end
    end
    if in_Grade < 0 or MAX_GRADE_LEVEL < in_Grade then
      self:SetFailed("SetEnchant", "1번째 값은 0과 " .. MAX_GRADE_LEVEL .. "사이어야 합니다.")
    else
      if in_Rate < 0 or in_Rate > 100000 then
        self:SetFailed("SetEnchant", "3번째 값은 0에서 100000사이어야 합니다.")
      end
    end
    if not self.EnchantRateTbl then
      self.EnchantRateTbl = {}
      -- DECOMPILER ERROR at PC61: Confused about usage of register: R4 in 'UnsetPending'

      if not (self.EnchantRateTbl)[in_Grade] then
        (self.EnchantRateTbl)[in_Grade] = {}
        -- DECOMPILER ERROR at PC64: Confused about usage of register: R4 in 'UnsetPending'

        ;
        ((self.EnchantRateTbl)[in_Grade])[in_ItemDB] = in_Rate
      end
    end
  end

  SlotInfo.AddPerfectEnchant = function(self, in_ItemDB, in_Zeny, ...)
    -- function num : 0_2_6
    if type(in_ItemDB) ~= "string" then
      self:SetFailed("AddPerfectEnchant", "1번째 값은 문자열이어야 합니다.")
    else
      if type(in_Zeny) ~= "number" then
        self:SetFailed("AddPerfectEnchant", "2번째 값은 숫자여야 합니다.")
      end
    end
    if in_Zeny < 0 then
      self:SetFailed("AddPerfectEnchant", "2번째 값은 0보다 커야 합니다.")
    end
    if MAX_MATERIAL_NUM < #arg then
      self:SetFailed("AddPerfectEnchant", "재료는 " .. MAX_MATERIAL_NUM .. "종 이하여야 합니다.")
    end
    local tempMatTbl = {}
    for i,matInfo in ipairs(arg) do
      if type(matInfo) ~= "table" then
        self:SetFailed("AddPerfectEnchant", "재료는 테이블 형식으로 작성되어야 합니다.")
      else
        if type(matInfo[1]) ~= "string" then
          self:SetFailed("AddPerfectEnchant", "재료 목록이 잘못 작성되었습니다.")
        else
          if type(matInfo[2]) ~= "number" then
            self:SetFailed("AddPerfectEnchant", "재료 목록이 잘못 작성되었습니다.")
          end
        end
      end
      tempMatTbl[matInfo[1]] = matInfo[2]
    end
    local tbl = {Zeny = in_Zeny, MatTbl = tempMatTbl}
    -- DECOMPILER ERROR at PC79: Confused about usage of register: R6 in 'UnsetPending'

    ;
    (self.PerfectECTbl)[in_ItemDB] = tbl
  end

  SlotInfo.AddUpgradeEnchant = function(self, in_ItemDB, in_ResultItemDB, in_Zeny, ...)
    -- function num : 0_2_7
    if type(in_ItemDB) ~= "string" then
      self:SetFailed("AddUpgradeEnchant", "1번째 값은 문자열이어야 합니다.")
    else
      if type(in_ResultItemDB) ~= "string" then
        self:SetFailed("AddUpgradeEnchant", "2번째 값은 문자열이어야 합니다.")
      else
        if type(in_Zeny) ~= "number" then
          self:SetFailed("AddUpgradeEnchant", "3번째 값은 숫자여야 합니다.")
        end
      end
    end
    if in_Zeny < 0 then
      self:SetFailed("AddUpgradeEnchant", "3번째 값은 0보다 커야 합니다.")
    end
    if MAX_MATERIAL_NUM < #arg then
      self:SetFailed("AddUpgradeEnchant", "재료는 " .. MAX_MATERIAL_NUM .. "종 이하여야 합니다.")
    end
    local tempMatTbl = {}
    for i,matInfo in ipairs(arg) do
      if type(matInfo) ~= "table" then
        self:SetFailed("AddPerfectEnchant", "재료는 테이블 형식으로 작성되어야 합니다.")
      else
        if type(matInfo[1]) ~= "string" then
          self:SetFailed("AddPerfectEnchant", "재료 목록이 잘못 작성되었습니다.")
        else
          if type(matInfo[2]) ~= "number" then
            self:SetFailed("AddPerfectEnchant", "재료 목록이 잘못 작성되었습니다.")
          end
        end
      end
      tempMatTbl[matInfo[1]] = matInfo[2]
    end
    local tbl = {ResultItemDB = in_ResultItemDB, Zeny = in_Zeny, MatTbl = tempMatTbl}
    if (self.UpgradeECTbl)[in_ItemDB] ~= nil then
      self:SetFailed("AddPerfectEnchant", "[ " .. in_ItemDB .. " ]의 정보가 중복되었습니다.")
    end
    -- DECOMPILER ERROR at PC101: Confused about usage of register: R7 in 'UnsetPending'

    ;
    (self.UpgradeECTbl)[in_ItemDB] = tbl
  end

  return SlotInfo
end

CheckFile = function()
  -- function num : 0_3
  for EnchantNum,EnchantInfo in pairs(Table) do
    if EnchantInfo.SlotOrder == nil then
      EnchantInfo:SetFailed("SetSlotOrder", "슬롯 테이블 정보가 존재하지 않습니다.")
    end
    if EnchantInfo.TargetItemTbl == nil then
      EnchantInfo:SetFailed("AddTargetItem", "대상 아이템 정보가 존재하지 않습니다.")
    end
    if EnchantInfo.Condition == nil then
      EnchantInfo:SetFailed("SetCondition", "제한 설정 정보가 존재하지 않습니다.")
    end
    if EnchantInfo.bApproveRandomOpt == nil then
      EnchantInfo:SetFailed("ApproveRandomOption", "랜덤옵션 제한 설정 정보가 존재하지 않습니다.")
    end
    if EnchantInfo.Reset == nil then
      EnchantInfo:SetFailed("SetReset", "초기화 정보가 존재하지 않습니다.")
    end
    if EnchantInfo.CautionMsg == nil then
      EnchantInfo:SetFailed("SetCaution", "주의사항 메세지가 존재하지 않습니다.")
    end
    for slotNum,slotInfo in pairs(EnchantInfo.Slot) do
      if slotInfo.RequireTbl == nil then
        slotInfo:SetFailed("SetRequire", "랜덤인챈트의 재료 정보가 존재하지 않습니다.")
      end
      if slotInfo.SuccessRate == nil then
        slotInfo:SetFailed("SetSuccessRate", "인챈트 성공확룔 정보가 존재하지 않습니다.")
      end
      if slotInfo.GradeBonusTbl == nil then
        slotInfo:SetFailed("SetGradeBonus", "등급별 성공 보너스 정보가 존재하지 않습니다.")
      end
      if slotInfo.EnchantRateTbl == nil then
        slotInfo:SetFailed("SetEnchant", "랜덤인챈트 정보가 존재하지 않습니다.")
      end
      for grade,gradeBonus in pairs(slotInfo.GradeBonusTbl) do
        if slotInfo.SuccessRate + gradeBonus > 100000 then
          slotInfo:SetFailed("SetGradeBonus", "SuccessRate + SetGradeBonus( " .. grade .. " )의 값이 100000을 넘을 수 없습니다.")
        end
      end
      for grade,rateTbl in pairs(slotInfo.EnchantRateTbl) do
        local totalRate = 0
        for itemDB,rate in pairs(rateTbl) do
          totalRate = totalRate + rate
        end
        if totalRate ~= 100000 then
          slotInfo:SetFailed("SetEnchant", grade .. "등급의 확률 총합이 100000이 아닙니다.")
        end
      end
    end
  end
  if LoadFailed == true then
    return false, "EnchantList.lua 파일이 올바르게 작성되지 않았습니다."
  end
  return true, "good"
end

GetEnchantInfo = function(in_EnchantNum)
  -- function num : 0_4
  local EnchantInfo = Table[in_EnchantNum]
  if EnchantInfo == nil then
    return false, in_EnchantNum .. " : 해당 인챈트 정보를 찾을 수 없습니다."
  end
  result = C_SetSlotOrder(in_EnchantNum, EnchantInfo.SlotOrder)
  if not result then
    return false, msg
  end
  for k,TargetItemDB in ipairs(EnchantInfo.TargetItemTbl) do
    result = C_AddTargetItem(in_EnchantNum, TargetItemDB)
    if not result then
      return false, msg
    end
  end
  result = C_SetCondition(in_EnchantNum, (EnchantInfo.Condition).MinRefine, (EnchantInfo.Condition).MinGrade)
  if not result then
    return false, msg
  end
  result = C_ApproveRandomOption(in_EnchantNum, EnchantInfo.bApproveRandomOpt)
  if not result then
    return false, msg
  end
  result = C_SetReset(in_EnchantNum, (EnchantInfo.Reset).bReset, (EnchantInfo.Reset).Rate, (EnchantInfo.Reset).Zeny, (EnchantInfo.Reset).MatTbl)
  if not result then
    return false, msg
  end
  if IS_CLIENT == true then
    result = C_SetCaution(in_EnchantNum, EnchantInfo.CautionMsg)
    if not result then
      return false, msg
    end
  end
  for slotNum,slotInfo in pairs(EnchantInfo.Slot) do
    result = C_SetRequire(in_EnchantNum, slotNum, (slotInfo.RequireTbl).Zeny, (slotInfo.RequireTbl).MatTbl)
    if not result then
      return false, msg
    end
    result = C_SetSuccessRate(in_EnchantNum, slotNum, slotInfo.SuccessRate)
    if not result then
      return false, msg
    end
    result = C_SetGradeBonus(in_EnchantNum, slotNum, slotInfo.GradeBonusTbl)
    if not result then
      return false, msg
    end
    for grade,rateTbl in pairs(slotInfo.EnchantRateTbl) do
      result = C_SetEnchant(in_EnchantNum, slotNum, grade, rateTbl)
      if not result then
        return false, msg
      end
    end
    for ItemDB,perfectECTInfo in pairs(slotInfo.PerfectECTbl) do
      result = C_AddPerfectEnchant(in_EnchantNum, slotNum, ItemDB, perfectECTInfo.Zeny, perfectECTInfo.MatTbl)
      if not result then
        return false, msg
      end
    end
    for ItemDB,upgradeECTInfo in pairs(slotInfo.UpgradeECTbl) do
      result = C_AddUpgradeEnchant(in_EnchantNum, slotNum, ItemDB, upgradeECTInfo.ResultItemDB, upgradeECTInfo.Zeny, upgradeECTInfo.MatTbl)
      if not result then
        return false, msg
      end
    end
  end
  return true, "good"
end

LoadAllData = function()
  -- function num : 0_5
  for EnchantNum,EnchantInfo in pairs(Table) do
    result = GetEnchantInfo(EnchantNum)
    if not result then
      return false, msg
    end
  end
  return true, "good"
end


